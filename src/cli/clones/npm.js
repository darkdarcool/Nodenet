const fs = require("fs")
var chalk = require('chalk');
var git = `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port`

function retrive() {
	console.log(chalk.blue.bold('Extracting file cores...'))
}
function decoding() {
	console.log(chalk.blue.bold('Decoding files...'))
}
function writing() {
	console.log(chalk.blue.bold("Writing files..."))
}
function done() {
	console.log(chalk.green.bold(`Succesfully created console project! Please open '${file}' and read the README.md and start editing!`))
}
function makeSrc() {
	fs.mkdir(`./${file}/src/`, function(err) {
		if (err) {
			console.log(err);
		}
	});
}
function makeGit() {
	fs.appendFile(`./${file}/.gitignore`, git, function(err) {
		if (err) {
			console.log(err);
		}
	});
}
function makeIndex() {
	fs.appendFile(`./${file}/src/index.js`,"function sayHello(name) {\n	console.log(\"Hello \" + name + \"!\");\n}\nmodule.exports = sayHello;", function (err) {
		if (err) {
			console.log(err);
		}
	});
}
function makeMd() {
	fs.appendFile(`./${file}/README.md`, readme, function(err) {
		if (err) {
			console.log(err);
		}
	});
}

function makeRoot() {
	fs.appendFile(`./${file}/index.js`, `const sayHello = require('./src/index.js');\nmodules.exports = {\n	sayHello\n}`, function (err) {
		if (err) {
			console.log(err);
		}
	})
}
// 4
var file;
var readme = `# NPM-Template


To start, please run 

\`\`\`
npm init
\`\`\`
Answer the prompts given in the terminal.

Then you can write all the node you want in the src/ dir, and when you want to publish your package, please run:

\`\`\`
npm login && npm publish
\`\`\`

And enter in your info, and if everything goes okay, your package will be uploaded for others to use!
`
function npmTemplate() {
	if (process.argv[4] == "-o" || process.argv[4] == "--out") {
		if (process.argv[5] == undefined) {
			console.log(chalk.red.bold("Output file not specified"));
			process.exit(0)
		}
		else {
			file = process.argv[5];
		}
	}
	else {
		file = "package"
	}
	fs.mkdir(`${file}`, function(err) {
  	if (err) {
			console.log(chalk.red.bold(`'${file}' already exists.`));
			process.exit(0)
  	} 
	});
	setTimeout(makeSrc, 5000)
	setTimeout(retrive, 5000)
	setTimeout(makeIndex, 5500)
	setTimeout(makeMd, 6000);
	setTimeout(decoding, 5500)
	setTimeout(makeGit, 6500);
	setTimeout(writing, 6750);
	setTimeout(makeRoot, 7000);
	setTimeout(done, 7500)

}

module.exports = {
	npmTemplate
}
